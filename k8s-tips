-----------------------------------------------------------------------------
无头服务，就是直接把后面的端点的 ip list全拿过来，而不是负载均衡
Each connection to the service is forwarded to one randomly selected backing pod. But what if the client needs to connect to all of those pods? What if the backing pods 
themselves need to each connect to all the other backing pods. Connecting through the service clearly isn’t the way to do this. What is?

For a client to connect to all pods, it needs to figure out the the IP of each individual pod. One option is to have the client call the Kubernetes API server and 
get the list of pods and their IP addresses through an API call, but because you should always strive to keep your apps Kubernetes-agnostic, using the API server isn’t ideal

Luckily, Kubernetes allows clients to discover pod IPs through DNS lookups. Usually, when you perform a DNS lookup for a service, the DNS server returns a single 
IP — the service’s cluster IP. But if you tell Kubernetes you don’t need a cluster IP for your service (you do this by setting the clusterIP field to None in the 
service specification ), the DNS server will return the pod IPs instead of the single service IP. Instead of returning a single DNS A record, the DNS server will 
return multiple A records for the service, each pointing to the IP of an individual pod backing the service at that moment. Clients can therefore do a simple DNS A record 
lookup and get the IPs of all the pods that are part of the service. The client can then use that information to connect to one, many, or all of them.

Setting the clusterIP field in a service spec to None makes the service headless, as Kubernetes won’t assign it a cluster IP through which clients could connect 
to the pods backing it.


--------------------------------------------------------------------------------------------------------

pod创建：

The kubelet doesn't create the Pod by itself. Instead, it delegates the work to three other components:

The Container Runtime Interface (CRI) — the component that creates the containers for the Pod.
The Container Network Interface (CNI) — the component that connects the containers to the cluster network and assigns IP addresses.
The Container Storage Interface (CSI) — the component that mounts volumes in your containers.

Once all three components have successfully completed, the Pod is Running in your Node and has an IP address assigned.
然后kubelet会回调，或者说告诉master pod 的 ip，然后就存etcd里了，
The kubelet reports the IP address back to the control plane.

只有通过readiness和liveness的才会被加入service

端点：
If the IP address is 10.0.0.3 and the targetPort is 3000, Kubernetes concatenates the two values and calls them an endpoint.

IP address + port = endpoint
---------------------------------
10.0.0.3   + 3000 = 10.0.0.3:3000

The endpoints are stored in etcd in another object called Endpoint.

every Service Kubernetes automatically creates an Endpoint object.

The Endpoint object is refreshed with a new list of endpoints when:

A Pod is created.
A Pod is deleted.
A label is modified on the Pod.

 every time you create a Pod and after the kubelet posts its IP address to the master Node, Kubernetes updates all the endpoints to reflect the change:


------------------------------------------------------------------------------------------------------
容器：
容器名称至少有6个字段，中间用下划线隔开。所有kubernetes启动的容器的containerNamePrefix都是k8s。
官方格式：containerNamePrefix_containerName_PodFullName_namespace_PodUID_restartCount


---------------------------------------------------------------------------------------------------------
deployment：
Each object that you store has three parts:
 the metadata, a specification and the current observed status.

A Kubernetes Deployment managed ReplicaSet. Each one represents a different version of the deployed application.
 Each ReplicaSet manages a set of identically versioned Pods.

yaml结构：
metadata
spec
status
conditions

the metadata contains again the deployment revision number. This is how a Deployment knows which ReplicaSet is the current one.


resourceVersion will change after any modification of the object.
The reason of it's existence is to avoid concurrency problems where multiple clients try to modify the same k8s resource. 
This pattern is pretty common also in databases and you can find more info about it:
其实就是并发控制，乐观锁

Same goes for any change in the deployment k8s resource which will trigger re-deployment. the generation value will be incremented by 1, 
and then it will take some time until observedGeneration will be equal to generation value.

generation：
系统设置的一个单调递增的数，表示每个资源期望状态的代际，比如deployment下  replica set的版本，可以版本回退（undo），可以滚动更新。
a sequence number representing a specific generation of the desired state. Set by the system and monotonically increasing, per-resource.
May be compared, such as for RAW and WAW consistency.
