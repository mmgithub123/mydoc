记录存储：
一种是允许外部进程在服务器运行的时候更新zone文件；
　　另外一种是将zone中的资源记录RR存储在数据库中，每次查找zone中记录的时候动态读取；
------------------------------------------------------------------------------------------
By default BIND will install in /usr/local and place files in these subdirectories of it:

sbin - named and all the system administrative tools associated with BIND such as rndc, dnssec-keygen, named-checkconf etc..
bin - tools for non-admin users - you'll find dig, host and nsupdate here
lib - object code libraries
share - (and various subdirectories) BIND's man pages
include - C header files
In addition, BIND compiled with no change to the default directories will expect to use the following directories (relative to /)

/etc - configuration files (such as named.conf, rndc.conf)
/var/run - run-time files created and used by named

log位置  统一看配置文件
-----------------------------------------------------------------------------

install and use

..yum install bind bind-utils
2,You're now ready to run named as a background daemon. Before launching it, 
it's a good idea to set up the default options for the management tool rndc.
..rndc-confgen -a
3,start
..systemctl start named
..netstat -nlp

----------------------------------------------------------

best Practices  ：
https://kb.isc.org/docs/bind-best-practices-authoritative
https://kb.isc.org/docs/bind-best-practices-recursive

1，Run BIND on a server dedicated to DNS only
2，Run separate authoritative and recursive DNS servers
3，Choose appropriate software and hardware

Take basic security measures
Run BIND as an unprivileged user.
To open low-numbered UDP and TCP ports BIND must be launched as root, but an alternate uid can be specified using the -u command line argument; 
after opening needed resources named will change its runtime uid to an unprivileged account.

Monitor the service
Put in place monitoring scripts to continually check health of servers and alert if conditions change substantially.

Conditions to monitor include:

process presence
CPU utilization
memory usage
network throughput and buffering (inbound/outbound)
filesystem utilization (on the log filesystem and also the filesystem containing the named working directory)
---------------------------------------------------------------------------------------------------------------------

tool：
dig, host,  nslookup 
named-checkconf，named-checkzone，named-compilezone

类型：
1、主DNS服务器
　　　　为客户端提供域名解析的主要区域，主DNS服务器宕机，会启用从DNS服务器提供服务。
　　2、从DNS服务器
　　　　主服务器DNS长期无应答，从服务器也会停止提供服务。
　　　　主从区域之间的同步采用周期性检查+通知的机制，从服务器周期性的检查主服务器上的记录情况，一旦发现修改就会同步，另外主服务器上如果有数据被修改了，会立即通知从服务器更新记录。
　　3、缓存服务器
　　　　服务器本身不提供解析区域，只提供非权威应答。
　　4、转发服务器
　　　　当DNS服务器的解析区域（包括缓存）中无法为当前的请求提供权威应答时，将请求转发至其它的DNS服务器，此时本地DNS服务器就是转发服务器。
    
    DNS的主要作用是进行主机名的解析。解析：根据用户提供一种名称，去查询解析库，以得到另一种名称。 正向解析与反向解析使用不同的解析库。

　　资源记录：rr(resource record)，有类型的概念；用于此记录解析的属性。

A：Address地址 IPv4
AAAA：Address地址 IPv6
NS：Name Server域名服务器
SOA：Start of Authority授权状态
MX：Mail Exchanger邮件交换
CNAME：Canonical Name规范名
PTR：Pointer指针

--------------------------------------------------------------------------------------------
dns实际使用中，即用递归查询，又使用迭代查询
查询顺序，1、本地hosts文件
　　　2、本地DNS缓存
　　　3、本地DNS服务器
　　　4、发起迭代查询
   
   DNS协议使用udp/tcp的53端口提供服务，客户端向DNS服务发起请求时，使用udp的53端口；DNS服务器间进行区域传送的时候使用TCP的53端口。
   ---------------------------------------------------------------------------
   配置使用：
    cat /var/named/test.com.Zone 
$TTL 1D
@       IN SOA  @ rname.invalid. (
                                        0       ; serial
                                        1D      ; refresh
                                        1H      ; retry
                                        1W      ; expire
                                        3H )    ; minimum
        NS      @
        A       127.0.0.1
        AAAA    ::1
www     IN A    109.63.5.4
   
   -------------------------------------------------------------------------------------------------
   stress testing：
   DNS Latency is the #1 “Key Performance Indicator” (KPI) for a DNS system’s success
   tool：
https://github.com/DNS-OARC/flamethrower
https://github.com/cobblau/dnsperf

基准：
https://github.com/cleanbrowsing/dnsperftest

bind 自带queryperf压测
https://blog.51cto.com/wubinary/1379595
wget  https://downloads.isc.org/isc/bind9/cur/9.11/bind-9.11.32.tar.gz
tar -zxvf bind-9.11.32.tar.gz
cd contrib/queryperf
./configure
make
cp queryperf /usr/bin
queryperf --help
queryperf -d  input-file.txt  -l 100

并发：同时向系统请求处理的数量

吞吐量：
qps  
   
响应时间：
最大响应时间
平均响应时间

有效请求

机器利用率

1秒=1000毫秒(ms) 1秒=1,000,000 微秒(μs) 

负载：
Load Average是 CPU的Load，它所包含的信息不是CPU的使用率状况，而是在一段时间内CPU正在处理以及等待CPU处理的进程数之和的统计信息，也就是CPU使用队列的长度的统计信息。
多核处理器中，你的Load Average不应该高于处理器核心的总数量。
平均负载是指上一分钟同时处于就绪状态的平均进程数。在CPU中可以理解为CPU可以并行处理的任务数量，就是CPU个数X核数
有些任务不能被及时分配处理器，那要保证性能的话，最好要小于CPU个数X核数X0.7。
Load Average会有3个状态平均值，分别是1分钟、5分钟和15分钟平均Load。

对于cpu负载的理解，首先需要搞清楚下面几个问题：

1）系统load高不一定是性能有问题。
因为Load高也许是因为在进行cpu密集型的计算

2）系统Load高不一定是CPU能力问题或数量不够。
因为Load高只是代表需要运行的队列累计过多了。但队列中的任务实际可能是耗Cpu的，也可能是耗i/0奶子其他因素的。

3）系统长期Load高，解决办法不是一味地首先增加CPU
因为Load只是表象，不是实质。增加CPU个别情况下会临时看到Load下降，但治标不治本。

4）在Load average 高的情况下需要鉴别系统瓶颈到底是CPU不足，还是io不够快造成或是内存不足造成的。
—


queryperf -d bind-input.txt -l 300

  -q specifies the maximum number of queries outstanding (default: 20) 并发数  20
-l     specifies how a limit for how long to run tests in seconds                  压测持续时间


并发
20       

吞吐量
88000  qps

26292327   总查询数
300            压测持续时间


响应时间：
 0.0002     平均响应时间
0.015       最大响应时间

有效请求
 Percentage completed: 100.00%
  Percentage lost:        0.00%

 Parse input file:     multiple times
  Run time limit:       300 seconds
  Ran through file:     52 times
反复 seek  请求

cpu使用率    80%

1颗物理CPU，双核4线程；


load average: 3.22, 3.27, 2.52
Tasks: 105 total,   2 running, 103 sleeping,   0 stopped,   0 zombie
%Cpu(s): 42.6 us, 35.2 sy
KiB Mem :  8008264 total,   128152 free,   786552



